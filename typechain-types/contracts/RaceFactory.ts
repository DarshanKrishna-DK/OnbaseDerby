/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RaceFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeRaceIds"
      | "createRace"
      | "getActiveRaces"
      | "getRaceDetails"
      | "isRaceActive"
      | "joinRace"
      | "markRaceEnded"
      | "oracle"
      | "raceHosts"
      | "races"
      | "setOracle"
      | "startRace"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PlayerJoined"
      | "RaceCreated"
      | "RaceEnded"
      | "RaceStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeRaceIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveRaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaceDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRaceActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinRace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markRaceEnded",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raceHosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "races", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startRace",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeRaceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRaceActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinRace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markRaceEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raceHosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "races", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startRace", data: BytesLike): Result;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    raceId: BigNumberish,
    player: AddressLike,
    team: BigNumberish
  ];
  export type OutputTuple = [raceId: bigint, player: string, team: bigint];
  export interface OutputObject {
    raceId: bigint;
    player: string;
    team: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceCreatedEvent {
  export type InputTuple = [
    raceId: BigNumberish,
    host: AddressLike,
    raceInstance: AddressLike,
    entryFee: BigNumberish
  ];
  export type OutputTuple = [
    raceId: bigint,
    host: string,
    raceInstance: string,
    entryFee: bigint
  ];
  export interface OutputObject {
    raceId: bigint;
    host: string;
    raceInstance: string;
    entryFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceEndedEvent {
  export type InputTuple = [raceId: BigNumberish, winningTeam: BigNumberish];
  export type OutputTuple = [raceId: bigint, winningTeam: bigint];
  export interface OutputObject {
    raceId: bigint;
    winningTeam: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceStartedEvent {
  export type InputTuple = [raceId: BigNumberish];
  export type OutputTuple = [raceId: bigint];
  export interface OutputObject {
    raceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RaceFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RaceFactory;
  waitForDeployment(): Promise<this>;

  interface: RaceFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeRaceIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  createRace: TypedContractMethod<
    [entryFee: BigNumberish],
    [bigint],
    "payable"
  >;

  getActiveRaces: TypedContractMethod<[], [bigint[]], "view">;

  getRaceDetails: TypedContractMethod<
    [raceId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        raceAddress: string;
        host: string;
        entryFee: bigint;
        currentState: bigint;
        totalPlayers: bigint;
        prizePool: bigint;
      }
    ],
    "view"
  >;

  isRaceActive: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  joinRace: TypedContractMethod<[raceId: BigNumberish], [void], "payable">;

  markRaceEnded: TypedContractMethod<
    [raceId: BigNumberish, winningTeam: BigNumberish],
    [void],
    "nonpayable"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  raceHosts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  races: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  startRace: TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeRaceIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createRace"
  ): TypedContractMethod<[entryFee: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "getActiveRaces"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRaceDetails"
  ): TypedContractMethod<
    [raceId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        raceAddress: string;
        host: string;
        entryFee: bigint;
        currentState: bigint;
        totalPlayers: bigint;
        prizePool: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRaceActive"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinRace"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "markRaceEnded"
  ): TypedContractMethod<
    [raceId: BigNumberish, winningTeam: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raceHosts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "races"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startRace"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RaceCreated"
  ): TypedContractEvent<
    RaceCreatedEvent.InputTuple,
    RaceCreatedEvent.OutputTuple,
    RaceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RaceEnded"
  ): TypedContractEvent<
    RaceEndedEvent.InputTuple,
    RaceEndedEvent.OutputTuple,
    RaceEndedEvent.OutputObject
  >;
  getEvent(
    key: "RaceStarted"
  ): TypedContractEvent<
    RaceStartedEvent.InputTuple,
    RaceStartedEvent.OutputTuple,
    RaceStartedEvent.OutputObject
  >;

  filters: {
    "PlayerJoined(uint256,address,uint8)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "RaceCreated(uint256,address,address,uint256)": TypedContractEvent<
      RaceCreatedEvent.InputTuple,
      RaceCreatedEvent.OutputTuple,
      RaceCreatedEvent.OutputObject
    >;
    RaceCreated: TypedContractEvent<
      RaceCreatedEvent.InputTuple,
      RaceCreatedEvent.OutputTuple,
      RaceCreatedEvent.OutputObject
    >;

    "RaceEnded(uint256,uint8)": TypedContractEvent<
      RaceEndedEvent.InputTuple,
      RaceEndedEvent.OutputTuple,
      RaceEndedEvent.OutputObject
    >;
    RaceEnded: TypedContractEvent<
      RaceEndedEvent.InputTuple,
      RaceEndedEvent.OutputTuple,
      RaceEndedEvent.OutputObject
    >;

    "RaceStarted(uint256)": TypedContractEvent<
      RaceStartedEvent.InputTuple,
      RaceStartedEvent.OutputTuple,
      RaceStartedEvent.OutputObject
    >;
    RaceStarted: TypedContractEvent<
      RaceStartedEvent.InputTuple,
      RaceStartedEvent.OutputTuple,
      RaceStartedEvent.OutputObject
    >;
  };
}
