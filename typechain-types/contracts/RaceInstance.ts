/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RaceInstanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPlayer"
      | "claimWinnings"
      | "entryFee"
      | "factory"
      | "getClaimableAmount"
      | "getTeam1Players"
      | "getTeam2Players"
      | "getTotalPlayers"
      | "hasClaimed"
      | "host"
      | "isPlayer"
      | "oracle"
      | "playerTaps"
      | "playerTeam"
      | "prizePool"
      | "raceId"
      | "recordResults"
      | "startRace"
      | "state"
      | "team1Players"
      | "team1TotalTaps"
      | "team2Players"
      | "team2TotalTaps"
      | "winningTeam"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PlayerAdded"
      | "RaceEnded"
      | "RaceStarted"
      | "ResultsRecorded"
      | "WinningsClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPlayer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "entryFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeam1Players",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeam2Players",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerTaps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "prizePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "raceId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordResults",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "startRace", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "team1Players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "team1TotalTaps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "team2Players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "team2TotalTaps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningTeam",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeam1Players",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeam2Players",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerTaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prizePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raceId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startRace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "team1Players",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "team1TotalTaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "team2Players",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "team2TotalTaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningTeam",
    data: BytesLike
  ): Result;
}

export namespace PlayerAddedEvent {
  export type InputTuple = [player: AddressLike, team: BigNumberish];
  export type OutputTuple = [player: string, team: bigint];
  export interface OutputObject {
    player: string;
    team: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceEndedEvent {
  export type InputTuple = [
    winningTeam: BigNumberish,
    team1Taps: BigNumberish,
    team2Taps: BigNumberish
  ];
  export type OutputTuple = [
    winningTeam: bigint,
    team1Taps: bigint,
    team2Taps: bigint
  ];
  export interface OutputObject {
    winningTeam: bigint;
    team1Taps: bigint;
    team2Taps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsRecordedEvent {
  export type InputTuple = [winners: AddressLike[], tapCounts: BigNumberish[]];
  export type OutputTuple = [winners: string[], tapCounts: bigint[]];
  export interface OutputObject {
    winners: string[];
    tapCounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinningsClaimedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RaceInstance extends BaseContract {
  connect(runner?: ContractRunner | null): RaceInstance;
  waitForDeployment(): Promise<this>;

  interface: RaceInstanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPlayer: TypedContractMethod<
    [player: AddressLike, team: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimWinnings: TypedContractMethod<[], [void], "nonpayable">;

  entryFee: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getClaimableAmount: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getTeam1Players: TypedContractMethod<[], [string[]], "view">;

  getTeam2Players: TypedContractMethod<[], [string[]], "view">;

  getTotalPlayers: TypedContractMethod<[], [bigint], "view">;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  host: TypedContractMethod<[], [string], "view">;

  isPlayer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  playerTaps: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  playerTeam: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  prizePool: TypedContractMethod<[], [bigint], "view">;

  raceId: TypedContractMethod<[], [bigint], "view">;

  recordResults: TypedContractMethod<
    [winners: AddressLike[], tapCounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  startRace: TypedContractMethod<[], [void], "nonpayable">;

  state: TypedContractMethod<[], [bigint], "view">;

  team1Players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  team1TotalTaps: TypedContractMethod<[], [bigint], "view">;

  team2Players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  team2TotalTaps: TypedContractMethod<[], [bigint], "view">;

  winningTeam: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPlayer"
  ): TypedContractMethod<
    [player: AddressLike, team: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimWinnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "entryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getClaimableAmount"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTeam1Players"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTeam2Players"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "host"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isPlayer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerTaps"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerTeam"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "prizePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raceId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordResults"
  ): TypedContractMethod<
    [winners: AddressLike[], tapCounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startRace"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "team1Players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "team1TotalTaps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "team2Players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "team2TotalTaps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winningTeam"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PlayerAdded"
  ): TypedContractEvent<
    PlayerAddedEvent.InputTuple,
    PlayerAddedEvent.OutputTuple,
    PlayerAddedEvent.OutputObject
  >;
  getEvent(
    key: "RaceEnded"
  ): TypedContractEvent<
    RaceEndedEvent.InputTuple,
    RaceEndedEvent.OutputTuple,
    RaceEndedEvent.OutputObject
  >;
  getEvent(
    key: "RaceStarted"
  ): TypedContractEvent<
    RaceStartedEvent.InputTuple,
    RaceStartedEvent.OutputTuple,
    RaceStartedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsRecorded"
  ): TypedContractEvent<
    ResultsRecordedEvent.InputTuple,
    ResultsRecordedEvent.OutputTuple,
    ResultsRecordedEvent.OutputObject
  >;
  getEvent(
    key: "WinningsClaimed"
  ): TypedContractEvent<
    WinningsClaimedEvent.InputTuple,
    WinningsClaimedEvent.OutputTuple,
    WinningsClaimedEvent.OutputObject
  >;

  filters: {
    "PlayerAdded(address,uint8)": TypedContractEvent<
      PlayerAddedEvent.InputTuple,
      PlayerAddedEvent.OutputTuple,
      PlayerAddedEvent.OutputObject
    >;
    PlayerAdded: TypedContractEvent<
      PlayerAddedEvent.InputTuple,
      PlayerAddedEvent.OutputTuple,
      PlayerAddedEvent.OutputObject
    >;

    "RaceEnded(uint8,uint256,uint256)": TypedContractEvent<
      RaceEndedEvent.InputTuple,
      RaceEndedEvent.OutputTuple,
      RaceEndedEvent.OutputObject
    >;
    RaceEnded: TypedContractEvent<
      RaceEndedEvent.InputTuple,
      RaceEndedEvent.OutputTuple,
      RaceEndedEvent.OutputObject
    >;

    "RaceStarted()": TypedContractEvent<
      RaceStartedEvent.InputTuple,
      RaceStartedEvent.OutputTuple,
      RaceStartedEvent.OutputObject
    >;
    RaceStarted: TypedContractEvent<
      RaceStartedEvent.InputTuple,
      RaceStartedEvent.OutputTuple,
      RaceStartedEvent.OutputObject
    >;

    "ResultsRecorded(address[],uint256[])": TypedContractEvent<
      ResultsRecordedEvent.InputTuple,
      ResultsRecordedEvent.OutputTuple,
      ResultsRecordedEvent.OutputObject
    >;
    ResultsRecorded: TypedContractEvent<
      ResultsRecordedEvent.InputTuple,
      ResultsRecordedEvent.OutputTuple,
      ResultsRecordedEvent.OutputObject
    >;

    "WinningsClaimed(address,uint256)": TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
    WinningsClaimed: TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
  };
}
